#!/usr/bin/env node

process.on('unhandledRejection', (err) => {
  throw err;
});

const { readFile: _readFile, existsSync } = require('fs');
const { promisify, inspect: _inspect } = require('util');

const readFile = promisify(_readFile);

function inspect(thing, call = 'log') {
  console[call](_inspect(thing, {
    depth: Infinity,
    colors: process.stdout.isTTY,
    maxArrayLength: Infinity,
    breakLength: 80,
    compact: false,
  }));
}

function usage() {
  console.log('usage: [...] | json [object.subobject.array.0] [file]');
  console.log('  output will be colored (if stdout is a tty) and wrapped to');
  console.log('  80 characters.');
  process.exit(1);
}

let sourceFile = process.argv.length > 2
  ? process.argv[2]
  : null;
let accessor = process.argv.length > 3
  ? process.argv[3].replace(/^\./, '')
  : null;

if (!existsSync(sourceFile) && accessor == null) {
  // assume that sourceFile is the accessor, and sourceFile was omitted.
  accessor = sourceFile;
  sourceFile = null;
}

if (process.stdin.isTTY && sourceFile == null) {
  // stdin is a tty (not being piped) and no file, bail
  usage();
}

function canResolve(thing, component) {
  if (Array.isArray(thing)) {
    return component < thing.length;
  }

  return Object.hasOwnProperty.call(thing, component);
}

function access(object, descriptor) {
  const components = descriptor.split('.');
  let current = object;
  for (const component of components) {
    if (!canResolve(current, component)) {
      console.error(`error: hit a snag on \`${component}\``);
      console.error('where i was:');
      inspect(current, 'error');

      process.exit(1);
    }
    current = current[component];
  }
  return current;
}

function stdin() {
  return new Promise((resolve, _reject) => {
    let data = '';

    process.stdin.on('data', (chunk) => {
      data += chunk;
    });
    process.stdin.on('end', () => resolve(data));
  });
}

async function consume() {
  let text;
  if (sourceFile == null) {
    text = await stdin();
  } else {
    text = await readFile(sourceFile, 'utf8');
  }

  if (text.trim() === '') {
    throw new Error('stdin is empty or only consists of whitespace');
  }

  const parsed = JSON.parse(text);
  const result = accessor ? access(parsed, accessor) : parsed;

  inspect(result);
}

consume();
